import pandas as pd
import os
import logging

# Configuração de logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

def organize_duplicates(input_file_path, output_file_path):
    """
    Organiza o arquivo Excel com base na coluna 'Excel Line' para agrupar contas duplicadas.
    
    Args:
    - input_file_path (str): Caminho do arquivo original na pasta data_source.
    - output_file_path (str): Caminho onde o arquivo organizado será salvo.
    """
    try:
        # Carregar o arquivo Excel
        logger.info(f"Carregando o arquivo de {input_file_path}...")
        df = pd.read_excel(input_file_path)

        # Imprimir colunas para depuração
        logger.debug(f"Colunas encontradas no arquivo: {list(df.columns)}")

        # Padronizar nomes das colunas para garantir que estejam no formato esperado
        df.columns = df.columns.str.strip().str.upper()

        # Verificar se as colunas necessárias estão presentes
        required_columns = ['ID', 'NEO_CPFCNPJ__C', 'EXCEL LINE']
        if not all(column in df.columns for column in required_columns):
            logger.error(f"O arquivo Excel precisa conter as colunas {required_columns}")
            return

        # Ordenar o DataFrame com base na coluna 'Excel Line'
        df_sorted = df.sort_values(by='EXCEL LINE').reset_index(drop=True)
        
        # Salvar o DataFrame organizado na pasta 'data'
        logger.info(f"Salvando o arquivo organizado em {output_file_path}...")
        df_sorted.to_excel(output_file_path, index=False)
        
        logger.info("Arquivo salvo com sucesso e organizado pela coluna 'Excel Line'.")
        
    except Exception as e:
        logger.error(f"Ocorreu um erro ao organizar o arquivo: {e}")

# Definir caminhos dos arquivos
input_file_path = 'data_source/conta_duplicadas.xlsx'
output_file_path = 'data/conta_duplicadas_organized.xlsx'

# Executar a função para organizar o arquivo
organize_duplicates(input_file_path, output_file_path)
